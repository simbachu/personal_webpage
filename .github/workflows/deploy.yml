name: Test and Deploy to Shared Hosting

on:
  push:
    branches:
      - main
      - developing

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: none

      - name: Install dependencies
        run: composer install

      - name: Run smoke tests
        run: vendor/bin/phpunit --testsuite=Smoke

      - name: Run unit tests
        run: vendor/bin/phpunit --testsuite=Unit

      - name: Run integration tests
        run: vendor/bin/phpunit --testsuite=Integration

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set deployment paths
        id: deploy_path
        run: |
          # SSH home is httpd.private
          # Repo structure: public/ -> httpd.www, private/ -> httpd.private (SSH root)
          # Dev environment uses dev/ subdirectory for isolation
          if [ "$GITHUB_REF" = "refs/heads/developing" ]; then
            ENV_PREFIX="dev/"
          else
            ENV_PREFIX=""
          fi

          PUBLIC_PATH="${{ secrets.SSH_PUBLIC_PATH || '../httpd.www' }}/${ENV_PREFIX}"
          PRIVATE_PATH="${ENV_PREFIX}"

          echo "public=$PUBLIC_PATH" >> $GITHUB_OUTPUT
          echo "private=$PRIVATE_PATH" >> $GITHUB_OUTPUT

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directories on server
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || 22 }} \
            ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} \
            "mkdir -p ${{ steps.deploy_path.outputs.public }} ${{ steps.deploy_path.outputs.private }}"

      - name: Deploy application files to private directory
        run: |
          rsync -avz --delete \
            --include='src/***' \
            --include='templates/***' \
            --include='content/***' \
            --include='composer.json' \
            --include='composer.lock' \
            --exclude='*' \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || 22 }}" \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ steps.deploy_path.outputs.private }}/

      - name: Deploy public files
        run: |
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || 22 }}" \
            ./public/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ steps.deploy_path.outputs.public }}/

      - name: Install Composer dependencies on server
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || 22 }} \
            ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} \
            "cd ${{ steps.deploy_path.outputs.private }} && composer install --no-dev --optimize-autoloader --classmap-authoritative --no-interaction"

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || 22 }} \
            ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} \
            "cd ${{ steps.deploy_path.outputs.private }} && php -r \"require 'vendor/autoload.php'; if (!class_exists('App\\\\Model\\\\ContentRepository')) { echo 'ERROR: Autoloader verification failed'; exit(1); } echo 'Autoloader OK';\""

      - name: Cleanup SSH key
        if: always()
        run: rm -f ~/.ssh/deploy_key

